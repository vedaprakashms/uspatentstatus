interface patnumber {
    number: String
    status: String
}

// Generated by https://quicktype.io

interface USPTO {
    PatentData: PatentDatum[]
}

interface PatentDatum {
    patentCaseMetadata: PatentCaseMetadata
    prosecutionHistoryDataBag: ProsecutionHistoryDataBag
    patentTermData: PatentTermData
    assignmentDataBag: AssignmentDataBag
    contentResourceBag: ContentResourceBag
    st96Version: string
    ipoVersion: string
}

interface AssignmentDataBag {
    assignmentData: AssignmentDatum[]
    assignmentTotalQuantity: number
}

interface AssignmentDatum {
    reelNumber: string
    frameNumber: string
    documentReceivedDate: string
    recordedDate: string
    mailDate: string
    pageTotalQuantity: number
    conveyanceText: string
    assignorBag: AssignorBag
    assigneeBag: AssigneeBag
    correspondenceAddress: CorrespondenceAddress
    sequenceNumber: string
}

interface AssigneeBag {
    assignee: Assignee[]
}

interface Assignee {
    contactOrPublicationContact: Contact[]
}

interface Contact {
    name: PurpleName
    postalAddressBag: ContactOrPublicationContactPostalAddressBag
}

interface PurpleName {
    personNameOrOrganizationNameOrEntityName: PersonNameOrOrganizationNameOrEntityName[]
}

interface PersonNameOrOrganizationNameOrEntityName {
    value: string
}

interface ContactOrPublicationContactPostalAddressBag {
    postalAddress: PurplePostalAddress[]
}

interface PurplePostalAddress {
    postalAddressText: PostalAddressText[]
}

interface PostalAddressText {
    sequenceNumber: string
    value: string
}

interface AssignorBag {
    assignor: Assignor[]
}

interface Assignor {
    executionDate: string
    contactOrPublicationContact: AssignorContactOrPublicationContact[]
}

interface AssignorContactOrPublicationContact {
    name: PurpleName
}

interface CorrespondenceAddress {
    partyIdentifierOrContact: Contact[]
}

interface ContentResourceBag {
    contentResource: ContentResource[]
}

interface ContentResource {
    officialDate: string
    documentCode: string
    descriptionText: string
    documentCategory: DocumentCategory
    pageTotalQuantity: number
}

enum DocumentCategory {
    Prosecution = 'PROSECUTION',
}

interface PatentCaseMetadata {
    applicationNumberText: ApplicationNumberText
    filingDate: string
    applicationTypeCategory: string
    partyBag: PartyBag
    groupArtUnitNumber: ApplicationNumberText
    applicationConfirmationNumber: string
    applicantFileReference: string
    priorityClaimBag?: PriorityClaimBag
    patentClassificationBag: PatentClassificationBag
    businessEntityStatusCategory: string
    firstInventorToFileIndicator: string
    inventionTitle: InventionTitle
    applicationStatusCategory: string
    applicationStatusDate: string
    officialFileLocationCategory: string
    patentPublicationIdentification: PatentPublicationIdentification
    patentGrantIdentification: PatentGrantIdentification
    relatedDocumentData?: RelatedDocumentData
    officialFileLocationDate?: string
}

interface ApplicationNumberText {
    value: string
    electronicText: string
}

interface InventionTitle {
    content: string[]
}

interface PartyBag {
    applicantBagOrInventorBagOrOwnerBag: ApplicantBagOrInventorBagOrOwnerBag[]
}

interface ApplicantBagOrInventorBagOrOwnerBag {
    primaryExaminerOrAssistantExaminerOrAuthorizedOfficer?: PrimaryExaminerOrAssistantExaminerOrAuthorizedOfficer[]
    inventorOrDeceasedInventor?: InventorOrDeceasedInventor[]
    registeredPractitioner?: RegisteredPractitioner[]
    partyIdentifierOrContact?: PartyIdentifierOrContact[]
}

interface InventorOrDeceasedInventor {
    contactOrPublicationContact: InventorOrDeceasedInventorContactOrPublicationContact[]
}

interface InventorOrDeceasedInventorContactOrPublicationContact {
    name: FluffyName
    cityName: string
    geographicRegionName: GeographicRegionName
    countryCode: string
}

interface GeographicRegionName {
    value: string
    geographicRegionCategory: string
}

interface FluffyName {
    personNameOrOrganizationNameOrEntityName: PurplePersonNameOrOrganizationNameOrEntityName[]
}

interface PurplePersonNameOrOrganizationNameOrEntityName {
    personStructuredName: PurplePersonStructuredName
}

interface PurplePersonStructuredName {
    firstName: string
    middleName: MiddleName
    lastName: string
    nameSuffix?: NameSuffix
}

enum MiddleName {
    A = 'A.',
    Empty = '',
    Han = 'Han',
}

enum NameSuffix {
    Empty = '',
    Iv = 'IV',
    Jr = 'Jr',
    NameSuffixJr = 'Jr.',
}

interface PartyIdentifierOrContact {
    name?: TentacledName
    postalAddressBag?: PurplePostalAddressBag
    value?: string
}

interface TentacledName {
    personNameOrOrganizationNameOrEntityName: FluffyPersonNameOrOrganizationNameOrEntityName[]
}

interface FluffyPersonNameOrOrganizationNameOrEntityName {
    personStructuredName: FluffyPersonStructuredName
}

interface FluffyPersonStructuredName {
    lastName: string
}

interface PurplePostalAddressBag {
    postalAddress: FluffyPostalAddress[]
}

interface FluffyPostalAddress {
    postalStructuredAddress: PostalStructuredAddress
}

interface PostalStructuredAddress {
    addressLineText: PersonNameOrOrganizationNameOrEntityName[]
    cityName: string
    geographicRegionName: PersonNameOrOrganizationNameOrEntityName[]
    countryCode: string
    postalCode: string
}

interface PrimaryExaminerOrAssistantExaminerOrAuthorizedOfficer {
    name: PrimaryExaminerOrAssistantExaminerOrAuthorizedOfficerName
}

interface PrimaryExaminerOrAssistantExaminerOrAuthorizedOfficerName {
    personNameOrOrganizationNameOrEntityName: TentacledPersonNameOrOrganizationNameOrEntityName[]
}

interface TentacledPersonNameOrOrganizationNameOrEntityName {
    personFullName: string
}

interface RegisteredPractitioner {
    registeredPractitionerRegistrationNumber: string
    registeredPractitionerCategory?: RegisteredPractitionerCategory
    contactOrPublicationContact: RegisteredPractitionerContactOrPublicationContact[]
    sequenceNumber: string
    activeIndicator: boolean
}

interface RegisteredPractitionerContactOrPublicationContact {
    name: FluffyName
    phoneNumberBag?: PhoneNumberBag
}

interface PhoneNumberBag {
    phoneNumber: PersonNameOrOrganizationNameOrEntityName[]
}

enum RegisteredPractitionerCategory {
    Agent = 'AGENT',
    Attorney = 'ATTORNEY',
}

interface PatentClassificationBag {
    cpcClassificationBagOrIPCClassificationOrECLAClassificationBag: CpcClassificationBagOrIPCClassificationOrECLAClassificationBag[]
}

interface CpcClassificationBagOrIPCClassificationOrECLAClassificationBag {
    ipOfficeCode: string
    mainNationalClassification: MainNationalClassification
}

interface MainNationalClassification {
    nationalClass: string
    nationalSubclass: string
}

interface PatentGrantIdentification {
    patentNumber: string
    grantDate: string
}

interface PatentPublicationIdentification {
    publicationNumber: string
    publicationDate: string
}

interface PriorityClaimBag {
    priorityClaim: PriorityClaim[]
}

interface PriorityClaim {
    ipOfficeName: string
    applicationNumber: ApplicationNumber
    filingDate: string
    sequenceNumber: string
}

interface ApplicationNumber {
    applicationNumberText: string
}

interface RelatedDocumentData {
    parentDocumentDataOrChildDocumentData: ParentDocumentDataOrChildDocumentDatum[]
}

interface ParentDocumentDataOrChildDocumentDatum {
    descriptionText: string
    applicationNumberText: string
    filingDate: string
    childDocumentStatusCode?: string
    patentNumber: string
    parentDocumentStatusCode?: string
}

interface PatentTermData {
    patentTermAdjustmentData: PatentTermAdjustmentData
}

interface PatentTermAdjustmentData {
    aDelayQuantity: number
    bDelayQuantity: number
    cDelayQuantity: number
    overlappingDayQuantity: number
    nonOverlappingDayQuantity: number
    ipOfficeDayDelayQuantity: number
    applicantDayDelayQuantity: number
    adjustmentTotalQuantity: number
    patentTermAdjustmentHistoryDataBag: PatentTermAdjustmentHistoryDataBag
}

interface PatentTermAdjustmentHistoryDataBag {
    patentTermAdjustmentHistoryData: PatentTermAdjustmentHistoryDatum[]
}

interface PatentTermAdjustmentHistoryDatum {
    eventSequenceNumber: number
    eventDate: string
    eventDescriptionText: string
    ipOfficeDayDelayQuantity: number
    applicantDayDelayQuantity: number
    originatingEventSequenceNumber: number
}

interface ProsecutionHistoryDataBag {
    prosecutionHistoryData: ProsecutionHistoryDatum[]
}

interface ProsecutionHistoryDatum {
    eventDate: string
    eventCode: string
    eventDescriptionText: string
}
